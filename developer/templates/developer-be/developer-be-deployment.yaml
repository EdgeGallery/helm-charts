############################################################################
# Copyright 2020 Huawei Technologies Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#  http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
############################################################################

apiVersion: apps/v1
kind: Deployment
metadata:
  name: developer-be
spec:
  selector:
    matchLabels:
      app: developer-be
  replicas: 1
  template:
    metadata:
      labels:
        app: developer-be
    spec:
      initContainers:
        - name: init-service-center
          image: {{ .Values.images.initservicecenter.repository }}:{{ .Values.images.initservicecenter.tag }}
          imagePullPolicy: {{ .Values.images.initservicecenter.pullPolicy }}
          command: ['sh', '-c', "until curl -k -f http{{ if .Values.global.ssl.enabled }}s{{ end }}://service-center:30100/v4/default/registry/health; do echo waiting for service center; sleep 2; done"]
        - name: init-usermgmt
          image: {{ .Values.images.initservicecenter.repository }}:{{ .Values.images.initservicecenter.tag }}
          imagePullPolicy: {{ .Values.images.initservicecenter.pullPolicy }}
          command: ['sh', '-c', "until curl -k -f {{ .Values.global.oauth2.authServerAddress }}; do echo waiting for auth server; sleep 2; done"]
      containers:
        - name: developer-be
          image: {{ .Values.images.developerBe.repository }}:{{ .Values.images.developerBe.tag }}
          imagePullPolicy: {{ .Values.images.developerBe.pullPolicy }}
          ports:
            - containerPort: 9082
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path}}
              port: {{ .Values.expose.developerBe.port }}
              scheme: {{ .Values.livenessProbe.scheme}}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds}}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds}}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds}}
            successThreshold: {{ .Values.livenessProbe.successThreshold}}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold}}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path}}
              port: {{ .Values.expose.developerBe.port }}
              scheme: {{ .Values.readinessProbe.scheme}}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds}}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds}}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds}}
          env:
            - name: CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: developer-be-secret
                  key: clientId
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: developer-be-secret
                  key: clientSecret
            - name: LOG_DIR
              value: /usr/app/log
            - name: LISTEN_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SC_ADDRESS
              value: http{{ if .Values.global.ssl.enabled }}s{{ end }}://service-center:30100
            - name: APPSTORE_ADDRESS
              value: http{{ if .Values.global.ssl.enabled }}s{{ end }}://appstore-be-svc:8099
            - name: POSTGRES_IP
              value: developer-be-postgres-svc
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DB_NAME
              value: {{ .Values.postgres.dbname }}
            - name: IMAGE_REPO_NAME
              value: {{ .Values.developer.dockerRepo.endpoint }}
            - name: IMAGE_REPO_PROJECT
              value: {{ .Values.developer.dockerRepo.project }}
            - name: IMAGE_REPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: developer-be-secret
                  key: dockerRepoPassword
            - name: VNC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: developer-be-secret
                  key: vmImageUsername
            - name: VNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: developer-be-secret
                  key: vmImagePassword
            - name: IMAGE_REPO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: developer-be-secret
                  key: dockerRepoUsername
            - name: POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: developer-be-secret
                  key: postgresUsername
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: developer-be-secret
                  key: postgresPassword
            - name: AUTH_SERVER_ADDRESS
              value: {{ .Values.global.oauth2.authServerAddress }}
            - name: SSL_ENABLED
              value: {{ quote .Values.global.ssl.enabled }}
            {{- if .Values.global.ssl.enabled }}
            - name: SSL_KEY_STORE_PATH
              value: /usr/app/ssl/keystore.p12
            - name: SSL_KEY_STORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.ssl.secretName }}
                  key: keystorePassword
            - name: SSL_KEY_STORE_TYPE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.ssl.secretName }}
                  key: keystoreType
            - name: SSL_KEY_ALIAS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.ssl.secretName }}
                  key: keyAlias
            {{- end }}
          volumeMounts:
            {{- if .Values.global.ssl.enabled }}
            - mountPath: /usr/app/ssl
              name: developer-be-keystore
            {{- end }}
            {{- if .Values.global.persistence.enabled }}
            - name: developer-be-data
              mountPath: /usr/app/user
            {{- end }}
            - mountPath: /var/run/docker.sock
              name: docker-sock
              readOnly: true
      volumes:
        {{- if .Values.global.ssl.enabled }}
        - name: developer-be-keystore
          secret:
            secretName: {{ .Values.global.ssl.secretName }}
            items:
              - key: keystore.p12
                path: keystore.p12
        {{- end }}
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
        {{- if .Values.global.persistence.enabled }}
        - name: developer-be-data
          persistentVolumeClaim:
            claimName: developer-be-data-pvc
        {{- end }}
{{- if .Values.global.persistence.enabled }}
  
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: developer-be-data-pvc
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: {{ quote .Values.global.persistence.storageClassName }}
  resources:
    requests:
      storage: 50Gi
{{- end }}