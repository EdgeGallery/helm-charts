apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tool-chain
spec:
  serviceName: "tool-chain-svc"
  selector:
    matchLabels:
      app: tool-chain
  replicas: 1
  template:
    metadata:
      labels:
        app: tool-chain
    spec:
      initContainers:
        - name: init-service-center
          image: {{ .Values.images.initservicecenter.repository }}:{{ .Values.images.initservicecenter.tag }}
          imagePullPolicy: {{ .Values.images.initservicecenter.pullPolicy }}
          command: ['sh', '-c', "until curl -k -f http{{ if .Values.global.ssl.enabled }}s{{ end }}://service-center:30100/v4/default/registry/health; do echo waiting for service center; sleep 2; done"]
      containers:
        - name: tool-chain
          image: {{ .Values.images.toolChain.repository }}:{{ .Values.images.toolChain.tag }}
          imagePullPolicy: {{ .Values.images.toolChain.pullPolicy }}
          ports:
            - containerPort: 8059
          env:
            - name: LOG_DIR
              value: /var/log/tool-chain
            - name: SC_ADDRESS
              value: http{{ if .Values.global.ssl.enabled }}s{{ end }}://service-center:30100
            - name: LISTEN_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SSL_ENABLED
              value: {{ quote .Values.global.ssl.enabled }}
            {{- if .Values.global.ssl.enabled }}
            - name: SSL_KEY_STORE_PATH
              value: /usr/app/ssl/keystore.p12
            - name: SSL_KEY_STORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.ssl.secretName }}
                  key: keystorePassword
            - name: SSL_KEY_STORE_TYPE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.ssl.secretName }}
                  key: keystoreType
            - name: SSL_KEY_ALIAS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.ssl.secretName }}
                  key: keyAlias
            {{- end }}
          volumeMounts:
            {{- if .Values.global.ssl.enabled }}
            - mountPath: /usr/app/ssl
              name: tool-chain-keystore
            {{- end }}
            {{- if .Values.global.persistence.enabled }}
            - name: tool-chain-log
              mountPath: /var/log/tool-chain
            {{- end }}
            - name: tool-chain-pvc
              mountPath: /opt/portadv/portadmin
        - name: porting-advisor
          image: {{ .Values.images.portingAdvisor.repository }}:{{ .Values.images.portingAdvisor.tag }}
          imagePullPolicy: {{ .Values.images.portingAdvisor.pullPolicy }}
          ports:
            - containerPort: 8084
          securityContext:
            privileged: true
          volumeMounts:
            - name: tool-chain-pvc
              mountPath: /opt/portadv/portadmin
      volumes:
        {{- if .Values.global.ssl.enabled }}
        - name: tool-chain-keystore
          secret:
            secretName: {{ .Values.global.ssl.secretName }}
            items:
              - key: keystore.p12
                path: keystore.p12
        {{- end }}
        {{- if .Values.global.persistence.enabled }}
        - name: tool-chain-log
          hostPath:
            path: /var/log/edgegallery/tool-chain
        {{- else}}
        - name: tool-chain-pvc
          emptyDir: {}
        {{- end }}
  {{- if .Values.global.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: tool-chain-pvc
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ quote .Values.global.persistence.storageClassName }}
        resources:
          requests:
            storage: 1Gi
  {{- end }}